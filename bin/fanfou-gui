#!/usr/bin/python
# -*- coding:utf-8 -*-

import sys
import pynotify
import ConfigParser
from os import path
from PyQt4 import QtCore, QtGui
from fanfou import Fanfou, TooLongStatusError

CONFIG_FILE = path.join(path.expanduser('~'), '.seviper')
VERSION = '0.1'
SOURCE = 'seviper'
USER_AGENT = 'seviper {0}'.format(VERSION)

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.setWindowModality(QtCore.Qt.NonModal)
        MainWindow.setEnabled(True)
        MainWindow.setMinimumSize(QtCore.QSize(391, 153))
        MainWindow.setMaximumSize(QtCore.QSize(391, 153))
        MainWindow.setBaseSize(QtCore.QSize(391, 135))
        MainWindow.setMouseTracking(False)
        MainWindow.setWindowOpacity(0.5)
        MainWindow.setToolTip("")
        MainWindow.setLayoutDirection(QtCore.Qt.LeftToRight)
        MainWindow.setAutoFillBackground(False)
        MainWindow.setToolButtonStyle(QtCore.Qt.ToolButtonIconOnly)
        MainWindow.setDocumentMode(False)
        MainWindow.setTabShape(QtGui.QTabWidget.Rounded)
        self.centralwidget = QtGui.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.TextEdit = QtGui.QPlainTextEdit(self.centralwidget)
        self.TextEdit.setGeometry(QtCore.QRect(10, 10, 371, 101))
        self.TextEdit.setTabChangesFocus(True)
        self.TextEdit.setObjectName("TextEdit")
        self.pushButton = QtGui.QPushButton(self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(290, 120, 90, 27))
        self.pushButton.setDefault(True)
        self.pushButton.setObjectName("pushButton")
        MainWindow.setCentralWidget(self.centralwidget)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        MainWindow.setWindowTitle(QtGui.QApplication.translate("MainWindow", "Seviper", None, QtGui.QApplication.UnicodeUTF8))
        self.TextEdit.setPlainText(QtGui.QApplication.translate("MainWindow", "", None, QtGui.QApplication.UnicodeUTF8))
        self.pushButton.setText(QtGui.QApplication.translate("MainWindow", "Submit", None, QtGui.QApplication.UnicodeUTF8))


def get_auth_info():
	'''获取饭否登入的验证字符串'''
	# 读取用户名
	config = ConfigParser.RawConfigParser()
	config.read(CONFIG_FILE)
	try:
		username = config.get('Auth', 'username')
		password = config.get('Auth', 'password')
	except (ConfigParser.NoOptionError, ConfigParser.NoSectionError):
		return False

	if password == None:
		return False

	return username, password

class Sendbox(Ui_MainWindow):
	def __init__(self, MainWindow, text = None):
		self.setupUi(MainWindow)
		QtCore.QObject.connect(self.pushButton, QtCore.SIGNAL("clicked()"), self.Submit)
		if text != None:
			self.TextEdit.setPlainText(QtGui.QApplication.translate("MainWindow", text, None, QtGui.QApplication.UnicodeUTF8))
	def Submit(self):
		text = unicode(self.TextEdit.toPlainText())
		try:
			username, password = get_auth_info()
		except TypeError:
			print >>sys.stderr, "Error: please check your config file."
			exit(0)
		fanfou = Fanfou(username, password, SOURCE, USER_AGENT)
		try:
			fanfou.update(text)
		except TooLongStatusError:
			print >>sys.stderr, "Error: Status is too long!"
			return 0
		else:
			pynotify.Notification('Seviper', 'Status sent!').show()
			exit(0)


def main():
	if not path.exists(CONFIG_FILE):
		print >>sys.stderr, 'No config file found, use `fanfou` to configure.'
	text = None
	if len(sys.argv) != 1:
		text = " ".join(sys.argv[1:])
	app = QtGui.QApplication(sys.argv)
	MainWindow = QtGui.QMainWindow()
	if text != None:
		Main = Sendbox(MainWindow, text = text)
	else:
		Main = Sendbox(MainWindow)
	MainWindow.show()
	sys.exit(app.exec_())


if __name__ == '__main__':
	exit(main())


