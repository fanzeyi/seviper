#!/usr/bin/env python
# - * - coding: UTF-8 - * -
''' Seviper '''

import sys
import getpass
import keyring
import mimetypes
import ConfigParser
import pynotify

from os import path
from fanfou import Fanfou, TooLongStatusError
from termcolor import colored

CONFIG_FILE = path.join(path.expanduser('~'), '.seviper')
KEYRING_SERVICE = 'seviper'
VERSION = '0.1'
SOURCE = 'seviper'
USER_AGENT = 'seviper {0}'.format(VERSION)

def notify_info(text, title='饭匙蛇', icon='emblem-favorite'):
    '''使用Notify-osd提醒'''
    pynotify.Notification(title, text, icon).show()

def create_config():
    '''创建配置文件'''
    # 获取信息
    try:
        username = raw_input('用户名：')
        #预检测
        while len(username) < 4:
            username = raw_input('用户名：')
        password = getpass.getpass('密码：')
        use_notify = raw_input('是否使用notify-osd提醒(y/n)：')
        while not(use_notify == 'y' or use_notify == 'n'):
            use_notify = raw_input('是否使用notify-osd提醒(y/n)：')
    except KeyboardInterrupt:
        print
        exit(1)

    # 保存密码
    keyring.set_password(KEYRING_SERVICE, username, password)
    
    # 保存配置文件
    config = ConfigParser.RawConfigParser()
    config.add_section('Auth')
    config.set('Auth', 'username', username)
    config.add_section('Other')
    config.set('Other', 'use_notify', use_notify)
    with open(CONFIG_FILE, 'wb') as f:
        config.write(f)

def get_auth_info():
    '''获取饭否登入的验证字符串'''
    # 读取用户名
    config = ConfigParser.RawConfigParser()
    config.read(CONFIG_FILE)
    try:
        username = config.get('Auth', 'username')
    except (ConfigParser.NoOptionError, ConfigParser.NoSectionError):
        return False

    # 获得密码
    try:
        password = keyring.get_password(KEYRING_SERVICE, username)
    except ValueError:
        return 1,1
    if password == None:
        return False
    
    # 获得用户名密码
    return username, password

def get_other_cfg():
    '''获得其他设置项目'''
    config = ConfigParser.RawConfigParser()
    config.read(CONFIG_FILE)
    try:
        use_notify = config.get('Other', 'use_notify')
    except (ConfigParser.NoOptionError, ConfigParser.NoSectionError):
        return False
    use_notify = use_notify == 'y'
    return use_notify

def get_filetype(filename):
    '''获取文件的类型'''
    file_type = mimetypes.guess_type(filename)
    if not file_type or not file_type[0]:
        return None
    return file_type[0].split('/')[0]

def print_usage():
    '''打印用法信息'''
    print '用法：{0} 消息'.format(sys.argv[0])
    print '  或：{0} 图片 [消息]'.format(sys.argv[0])
    print '  或：{0} 消息文件'.format(sys.argv[0])
    print '在饭否上发送消息或上传图片'
    print '对于最后一种，消息文件必须为文本文件，'
    print '文本文件中的每一行将作为一个消息被发送'
    print '如果消息文件为“-”，则从标准输入中读取'

def print_error_notice(*msgs):
    '''输出错误信息'''
    print >> sys.stderr, colored(msgs[0], 'red', attrs=['bold']), 
    for msg in msgs:
        print >> sys.stderr, msg, 
    print

def print_success_notice(*msgs):
    '''输出成功信息'''
    print >> sys.stderr, colored(msgs[0], 'green', attrs=['bold']), 
    for msg in msgs[1:]:
        print >> sys.stderr, msg, 
    print

def main():
    ''' Main Function '''
    # 验证配置文件
    if not path.exists(CONFIG_FILE) or not get_auth_info():
        print >>sys.stderr, '请输入饭否的注册信息'
        create_config()

    # 验证用户名密码
    while True:
        username, password = get_auth_info()
        if username == 1 and password == 1:
            print "获取keyring认证失败"
            return False
        fanfou = Fanfou(username, password, SOURCE, USER_AGENT)
        if fanfou.verify():
            break
        print_error_notice('用户名或密码错误，请重新输入')
        create_config()

    # 获取其他设置
    use_notify = get_other_cfg()

    def send_and_notice(func, *args):
        '''Send Message And Notice'''
        try:
            ret = func(*args)
        except TooLongStatusError:
            if(use_notify):
                notify_info('错误：消息超过140字！')
            else :
                print_error_notice('错误', '消息超过140字')
            return False
        else:
            if ret:
                if(use_notify):
                    notify_info('发送成功！')
                else :
                    print_success_notice('发送成功', *args)
                return True
            else:
                if(use_notify):
                    notify_info('发送失败!')
                else:
                    print_error_notice('发送失败', *args)
                return False

    def send_lines_in_file(fp):
        ''' Sending File'''
        ret = True
        for line in fp:
            ret = send_and_notice(fanfou.update, line)
            if not ret:
                ret = False
        return ret

    exit_code = 0
    # 获取参数
    if len(sys.argv) == 1:
        # 输出用法
        print_usage()
    else:
        # 根据参数发送
        arg1 = sys.argv[1]
        if arg1 == '-':
            ret = send_lines_in_file(sys.stdin)
            if not ret:
                exit_code = 1
        elif path.exists(arg1):
            file_type = get_filetype(arg1)
            if file_type == 'image':
                # 上传图片
                ret = send_and_notice(fanfou.upload,
                        arg1, ' '.join(sys.argv[2:]))
                if not ret:
                    exit_code = 1
            elif file_type == 'text':
                # 消息文件
                with open(arg1, 'r') as f:
                    ret = send_lines_in_file(f)
                    if not ret:
                        exit_code = 1
            else:
                # 错误
                if(use_notify):
                    notify_info('错误：未知的文件类型')
                else:
                    print_error_notice('错误', '未知的文件类型', arg1)
                exit_code = 1
        else:
            # 发送单条消息
            ret = send_and_notice(fanfou.update, ' '.join(sys.argv[1:]))
            if not ret:
                exit_code = 1
    
    # 返回
    return exit_code

if __name__ == '__main__':
    exit(main())

# vim: ts=4 sw=4 et
